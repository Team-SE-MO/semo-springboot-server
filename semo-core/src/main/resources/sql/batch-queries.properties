updateDeviceStatus=\
  UPDATE DEVICES SET STATUS = :status \
  WHERE DEVICE_ID = :deviceId
selectSessionData=\
  SELECT s.SID, "SERIAL#", s.USERNAME, COMMAND, COMMAND_NAME, s.STATUS, SCHEMANAME, OSUSER, PROCESS, MACHINE, PORT, TERMINAL, \
         s.PROGRAM, TYPE, s.SQL_ID, s.SQL_EXEC_START, s.SQL_EXEC_ID, SQL_TEXT, s.MODULE, s.ACTION, LOGON_TIME, LAST_CALL_ET, \
         FAILED_OVER, BLOCKING_SESSION_STATUS, EVENT, WAIT_CLASS, STATE, WAIT_TIME_MICRO, TIME_REMAINING_MICRO, s.SERVICE_NAME \
  FROM v$session s \
  LEFT OUTER JOIN v$sql_monitor m ON s.sql_id = m.sql_id AND s.sql_exec_start = m.sql_exec_start AND s.sql_exec_id = m.sql_exec_id \
  LEFT OUTER JOIN v$sqlcommand c ON s.command = c.command_type
insertSessionData=\
  INSERT INTO SESSION_DATA ( COLLECTED_AT, SID, DEVICE_ID, \
    SERIAL, USERNAME, COMMAND, COMMAND_NAME, STATUS, SCHEMANAME, OSUSER, PROCESS, MACHINE, PORT, TERMINAL, \
    PROGRAM, TYPE, SQL_ID, SQL_EXEC_START, SQL_EXEC_ID, SQL_TEXT, MODULE, ACTION, LOGON_TIME, LAST_CALL_ET, \
    FAILED_OVER, BLOCKING_SESSION_STATUS, EVENT, WAIT_CLASS, STATE, WAIT_TIME_MICRO, TIME_REMAINING_MICRO, SERVICE_NAME) \
  VALUES (:collectedAt, :sid, :deviceId, :serial, :username, :command, :commandName, :status, :schemaName, :osUser, :process, \
          :machine, :port, :terminal, :program, :type, :sqlId, :sqlExecStart, :sqlExecId, :sqlText, :module, :action, :logonTime, \
          :lastCallEt, :failedOver, :blockingSessionStatus, :event, :waitClass, :state, :waitTimeMicro, :timeRemainingMicro, :serviceName)
selectMetricData=\
  SELECT \
    (SELECT COUNT(*) FROM v$session) AS TOTAL_SESSION_COUNT, \
    (SELECT COUNT(*) FROM v$session WHERE STATUS = 'ACTIVE') AS ACTIVE_SESSION_COUNT, \
    (SELECT LISTAGG(USERNAME || ':' || SESSION_CNT, ', ') WITHIN GROUP (ORDER BY USERNAME) \
     FROM \
        (SELECT USERNAME, COUNT(*) AS SESSION_CNT \
         FROM v$session \
         WHERE USERNAME IS NOT NULL \
         GROUP BY USERNAME\
    )) AS SESSION_COUNT_GROUP_BY_USER, \
    (SELECT LISTAGG(COMMAND_NAME || ':' || COMMAND_CNT, ', ') WITHIN GROUP (ORDER BY COMMAND_NAME)\
     FROM \
        (SELECT c.COMMAND_NAME, COUNT(*) AS COMMAND_CNT \
         FROM (SELECT COMMAND FROM v$session WHERE COMMAND != 0) s JOIN v$sqlcommand c ON s.COMMAND = c.COMMAND_TYPE \
         WHERE COMMAND_NAME IS NOT NULL GROUP BY c.COMMAND_NAME\
        )) AS SESSION_COUNT_GROUP_BY_COMMAND, \
    (SELECT LISTAGG(MACHINE || ':' || MACHINE_CNT, ', ') WITHIN GROUP (ORDER BY MACHINE) \
     FROM \
        (SELECT MACHINE, COUNT(*) AS MACHINE_CNT \
         FROM v$session \
         GROUP BY MACHINE\
    )) AS SESSION_COUNT_GROUP_BY_MACHINE, \
    (SELECT LISTAGG(TYPE || ':' || TYPE_CNT, ', ') WITHIN GROUP (ORDER BY TYPE) \
     FROM \
        (SELECT TYPE, COUNT(*) AS TYPE_CNT \
         FROM v$session \
         GROUP BY TYPE\
    )) AS SESSION_COUNT_GROUP_BY_TYPE,\
    (SELECT COUNT(*) FROM v$session WHERE BLOCKING_SESSION_STATUS = 'VALID') AS BLOCKING_SESSION_COUNT, \
    (SELECT COUNT(*) FROM v$session WHERE STATE = 'WAITING' AND WAIT_CLASS != 'Idle') AS WAIT_SESSION_COUNT \
  FROM DUAL
insertMonitoringMetric=\
  INSERT INTO MONITORING_METRICS (COLLECTED_AT, DEVICE_ID, \
    TOTAL_SESSION_COUNT, ACTIVE_SESSION_COUNT, SESSION_COUNT_GROUP_BY_USER, SESSION_COUNT_GROUP_BY_COMMAND, \
    SESSION_COUNT_GROUP_BY_MACHINE, SESSION_COUNT_GROUP_BY_TYPE, BLOCKING_SESSION_COUNT, WAIT_SESSION_COUNT) \
  VALUES (:collectedAt, :deviceId, :totalSessionCount, :activeSessionCount, :sessionCountGroupByUser, \
          :sessionCountGroupByCommand, :sessionCountGroupByMachine, :sessionCountGroupByType, :blockingSessionCount, \
          :waitSessionCount)
selectMetricSummaryData=\
  SELECT \
    (SELECT COUNT(*) FROM DEVICES WHERE COMPANY_ID = :companyId AND STATUS = 1) AS ACTIVE_DEVICE_COUNT, \
    (SELECT COUNT(*) FROM DEVICES WHERE COMPANY_ID = :companyId AND STATUS = 0) AS INACTIVE_DEVICE_COUNT, \
    (SELECT COUNT(*) \
     FROM MONITORING_METRICS m \
     WHERE m.DEVICE_ID IN (SELECT DEVICE_ID \
                           FROM DEVICES \
                           WHERE COMPANY_ID = :companyId) \
     AND m.BLOCKING_SESSION_COUNT >= 3 \
     AND m.COLLECTED_AT = (SELECT MAX(COLLECTED_AT) \
                           FROM MONITORING_METRICS \
                           WHERE DEVICE_ID = m.DEVICE_ID)) AS BLOCKED_DEVICE_COUNT, \
    (SELECT LISTAGG(DEVICE_ALIAS || ':' || SESSION_COUNT, ', ') WITHIN GROUP (ORDER BY SESSION_COUNT DESC) \
     FROM (SELECT d.DEVICE_ALIAS, COUNT(s.DEVICE_ID) AS SESSION_COUNT \
           FROM DEVICES d \
           JOIN SESSION_DATA s ON d.DEVICE_ID = s.DEVICE_ID \
           WHERE d.COMPANY_ID = :companyId \
           AND s.COLLECTED_AT = (SELECT MAX(s2.COLLECTED_AT) \
                                 FROM SESSION_DATA s2 \
                                 WHERE s2.DEVICE_ID = s.DEVICE_ID) \
           GROUP BY d.DEVICE_ALIAS \
           ORDER BY SESSION_COUNT DESC \
           FETCH FIRST 3 ROWS ONLY)) AS TOP_USED_DEVICES, \
    (SELECT LISTAGG(DEVICE_ALIAS || ':' || BLOCKING_SESSION_COUNT, ', ') WITHIN GROUP (ORDER BY COLLECTED_AT DESC) \
     FROM (SELECT d.DEVICE_ALIAS, m.BLOCKING_SESSION_COUNT, m.COLLECTED_AT \
           FROM DEVICES d \
           JOIN MONITORING_METRICS m ON d.DEVICE_ID = m.DEVICE_ID \
           WHERE d.COMPANY_ID = :companyId \
           AND m.BLOCKING_SESSION_COUNT >= 3 \
           AND m.COLLECTED_AT = (SELECT MAX(m2.COLLECTED_AT) \
                                 FROM MONITORING_METRICS m2 \
                                 WHERE m2.DEVICE_ID = m.DEVICE_ID) \
           ORDER BY m.COLLECTED_AT DESC \
           FETCH FIRST 3 ROWS ONLY)) AS WARN_DEVICES, \
    (SELECT LISTAGG(DEVICE_ALIAS || ':' || DAYS_UNUSED, ', ') WITHIN GROUP (ORDER BY DAYS_UNUSED DESC) \
     FROM (SELECT d.DEVICE_ALIAS, m.DAYS_UNUSED \
           FROM (SELECT DEVICE_ID, EXTRACT(DAY FROM (SYSDATE - MAX(COLLECTED_AT))) AS DAYS_UNUSED \
                 FROM MONITORING_METRICS \
                 WHERE DEVICE_ID IN (SELECT DEVICE_ID \
                                     FROM DEVICES \
                                     WHERE COMPANY_ID = :companyId) \
                 GROUP BY DEVICE_ID \
                 HAVING EXTRACT(DAY FROM (SYSDATE - MAX(COLLECTED_AT))) >= 3) m \
           JOIN DEVICES d ON d.DEVICE_ID = m.DEVICE_ID)) AS UNUSED_DEVICES, \
    (SELECT LISTAGG(DEVICE_ALIAS || ':' || STATUS || ':' || SID || ':' || IP || ':' || PORT || ':' || ACTIVE_SESSION_COUNT, '; ') WITHIN GROUP (ORDER BY DEVICE_ALIAS) \
     FROM (SELECT d.DEVICE_ALIAS, \
               CASE \
                   WHEN COALESCE(m.BLOCKING_SESSION_COUNT, 0) >= 3 THEN 'BLOCKED' \
                   WHEN d.STATUS = 1 THEN 'ACTIVE' \
                   ELSE 'INACTIVE' \
               END AS STATUS, d.TYPE, d.SID, d.IP, d.PORT, COALESCE(m.ACTIVE_SESSION_COUNT, 0) AS ACTIVE_SESSION_COUNT \
           FROM DEVICES d \
           LEFT JOIN MONITORING_METRICS m ON d.DEVICE_ID = m.DEVICE_ID \ \
           AND m.COLLECTED_AT = (SELECT MAX(m2.COLLECTED_AT) \
                                 FROM MONITORING_METRICS m2 \
                                 WHERE m2.DEVICE_ID = d.DEVICE_ID) \
     WHERE d.COMPANY_ID = :companyId)) AS all_devices \
  FROM DUAL
