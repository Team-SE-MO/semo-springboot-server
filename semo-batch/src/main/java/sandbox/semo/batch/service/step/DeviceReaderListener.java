package sandbox.semo.batch.service.step;

import java.util.concurrent.atomic.AtomicInteger;
import lombok.extern.log4j.Log4j2;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.ItemReadListener;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.StepExecutionListener;
import org.springframework.stereotype.Component;
import sandbox.semo.domain.device.entity.Device;

@Log4j2
@Component
public class DeviceReaderListener implements ItemReadListener<Device>, StepExecutionListener {

    private AtomicInteger totalCount = new AtomicInteger(0);

    // StepExecutionListener Î©îÏÑúÎìú
    @Override
    public void beforeStep(StepExecution stepExecution) {
        log.info(">>> [ üîç Ïû•ÎπÑ Ï†ïÎ≥¥ Ï°∞Ìöå ÏãúÏûë ]");
    }

    @Override
    public ExitStatus afterStep(StepExecution stepExecution) {
        log.info(">>> [ ‚úÖ Î™®Îì† Ïû•ÎπÑ Ï†ïÎ≥¥ ÏùΩÍ∏∞ ÏôÑÎ£å, Ï¥ù Ï≤òÎ¶¨Îêú Ïû•ÎπÑ Ïàò: {} ]",
            totalCount.get());
        totalCount.set(0);
        return ExitStatus.COMPLETED;
    }

    // ItemReadListener Î©îÏÑúÎìú
    @Override
    public void afterRead(Device device) {
        log.info(">>> [ üìë Ïû•ÎπÑ Ï†ïÎ≥¥ ÏùΩÍ∏∞: {} - Thread: {} - Ï≤òÎ¶¨Îêú Ïû•ÎπÑ Ïàò: {} ]",
            device.getDeviceAlias(),
            Thread.currentThread().getName(),
            totalCount.incrementAndGet());
    }

    @Override
    public void onReadError(Exception ex) {
        log.error(">>> [ ‚ùå Ïû•ÎπÑ Ï†ïÎ≥¥ ÏùΩÍ∏∞ Ïã§Ìå®: {} ]", ex.getMessage());
    }
}
